// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤
import { useEffect, useState } from 'react';
import './../styles/ContactsPage.css';
import Exception from '../Exception';

const ContactsPage = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [activeTab, setActiveTab] = useState('general');
  const [contactsData, setContactsData] = useState(null);
  const [hasError, setHasError] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [ContactComponent, setContactComponent] = useState(null);

  // === –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Contact ===
  useEffect(() => {
    let isMounted = true;

    const loadContactSafely = async () => {
      try {
        const module = await import('../objects/Contact.jsx');
        if (isMounted) setContactComponent(() => module.default);
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Contact.jsx, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Exception.jsx –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ:', error);
        try {
          const fallbackModule = await import('../Exception.jsx');
          if (isMounted) setContactComponent(() => fallbackModule.default);
        } catch (fallbackError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Exception.jsx –∫–∞–∫ fallback:', fallbackError);
          if (isMounted)
            setContactComponent(() => ({ message }) => (
              <div
                style={{
                  padding: '2rem',
                  textAlign: 'center',
                  color: 'red',
                  fontFamily: 'sans-serif',
                }}
              >
                <h2>{message || '–û—à–∏–±–∫–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Contact –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}</h2>
              </div>
            ));
        }
      }
    };

    loadContactSafely();
    return () => {
      isMounted = false;
    };
  }, []);

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ===
  useEffect(() => {
    window.scrollTo(0, 0);
    setTimeout(() => setIsVisible(true), 100);

    fetch('/src/assets/contactsData.json')
      .then((res) => {
        if (!res.ok) throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return res.json();
      })
      .then((data) => {
        if (!data || typeof data !== 'object') throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON');
        setContactsData(data);
        setHasError(false);
      })
      .catch((err) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', err.message);
        setHasError(true);
      })
      .finally(() => {
        setIsLoading(false);
      });
  }, []);

  const hasContacts =
    contactsData &&
    typeof contactsData === 'object' &&
    contactsData[activeTab] &&
    Array.isArray(contactsData[activeTab]) &&
    contactsData[activeTab].length > 0;

  // === –ï—Å–ª–∏ Contact –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ===
  if (!ContactComponent) {
    return (
      <div className="contacts-container" style={{ textAlign: 'center', padding: '2rem' }}>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className={`contacts-container ${isVisible ? 'visible' : ''}`}>
      <section className="contacts-section">
        <div className="contacts-content">
          {/* === –ó–ê–ì–û–õ–û–í–û–ö === */}
          <h1 className="contacts-title">–ö–æ–Ω—Ç–∞–∫—Ç—ã –¶–û–î–î –°–º–æ–ª–µ–Ω—Å–∫–∞</h1>
          <p className="contacts-subtitle">
            –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥–æ—Ä–æ–≥–∏ –°–º–æ–ª–µ–Ω—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –¥–ª—è –≤–∞—Å
          </p>

          {/* === –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ó–ö–ò === */}
          {isLoading ? (
            <div className="loading-state">
              <div className="loading-spinner"></div>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...</p>
            </div>
          ) : hasError ? (
            <Exception message="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." />
          ) : !hasContacts ? (
            <Exception message="–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." />
          ) : (
            <>
              {/* === –¢–ê–ë–´ === */}
              <div className="contacts-tabs">
                <button
                  className={`tab-button ${activeTab === 'general' ? 'active' : ''}`}
                  onClick={() => setActiveTab('general')}
                  type="button"
                >
                  <span className="tab-icon">üìû</span>
                  –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
                </button>
                <button
                  className={`tab-button ${activeTab === 'departments' ? 'active' : ''}`}
                  onClick={() => setActiveTab('departments')}
                  type="button"
                >
                  <span className="tab-icon">üèõÔ∏è</span>
                  –û—Ç–¥–µ–ª—ã –∏ —Å–ª—É–∂–±—ã
                </button>
                <button
                  className={`tab-button ${activeTab === 'addresses' ? 'active' : ''}`}
                  onClick={() => setActiveTab('addresses')}
                  type="button"
                >
                  <span className="tab-icon">üìç</span>
                  –ê–¥—Ä–µ—Å–∞ –∏ —Ñ–∏–ª–∏–∞–ª—ã
                </button>
              </div>

              {/* === –ö–û–ù–¢–ê–ö–¢–´ === */}
              <div className="contacts-grid">
                {contactsData[activeTab]?.map((contact, index) => (
                  <div className="contact-card" key={index}>
                    <ContactComponent
                      title={contact.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                      description={contact.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
                      phone={contact.phone}
                      email={contact.email}
                      address={contact.address}
                      hours={contact.hours}
                      icon={contact.icon || ' '}
                      onContact={contact.onContact}
                      message="–û—à–∏–±–∫–∞: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Contact –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    />

                    <div className="contact-card-actions">
                      {contact.phone && (
                        <a href={`tel:${contact.phone}`} className="action-button primary">
                          <span className="button-icon">üìû</span>
                          –ü–æ–∑–≤–æ–Ω–∏—Ç—å
                        </a>
                      )}
                      {contact.email && (
                        <a href={`mailto:${contact.email}`} className="action-button secondary">
                          <span className="button-icon">‚úâÔ∏è</span>
                          –ù–∞–ø–∏—Å–∞—Ç—å
                        </a>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </>
          )}

          {/* === –≠–ö–°–¢–†–ï–ù–ù–´–ô –†–ê–ó–î–ï–õ === */}
          <div className="emergency-section">
            <div className="emergency-banner">
              <div className="emergency-icon">üö®</div>
              <div className="emergency-content">
                <h3 className="emergency-title">–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å</h3>
                <p className="emergency-description">
                  –ü—Ä–∏ –∞–≤–∞—Ä–∏—è—Ö, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –∏–ª–∏ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –Ω–∞ –¥–æ—Ä–æ–≥–µ
                </p>
                <div className="emergency-contacts">
                  <a href="tel:112" className="emergency-phone">
                    112
                  </a>
                  <a href="tel:+74812123461" className="emergency-phone">
                    +7 (4812) 12-34-61
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default ContactsPage;
